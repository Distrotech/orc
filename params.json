{"name":"Orc","tagline":"Mirror of git://anongit.freedesktop.org/gstreamer/orc","body":"\r\nORC - The Oil Runtime Compiler\r\n==============================\r\n\r\n(and OIL stands for Optimized Inner Loops)\r\n\r\nEntropy Wave Inc (http://entropywave.com/) presents Orc, the sucessor\r\nto Liboil - The Library of Optimized Inner Loops.\r\n\r\nOrc is a library and set of tools for compiling and executing\r\nvery simple programs that operate on arrays of data.  The \"language\"\r\nis a generic assembly language that represents many of the features\r\navailable in SIMD architectures, including saturated addition and\r\nsubtraction, and many arithmetic operations.\r\n\r\nAt this point, developers interested in using Orc should look at the\r\nexamples and try out a few Orc programs in an experimental branch\r\nof their own projects.  And provide feedback on how it works.  There\r\nwill likely be some major changes in ease of use from a developer's\r\nperspective over the next few releases.\r\n\r\nThe 0.4 series of Orc releases will be API and ABI compatible, and\r\nwill be incompatible with the 0.5 series when it comes out.  The first\r\nrelease of the 0.5 series is anticipated to coincide with the release\r\nof GStreamer 1.0.\r\n\r\n\r\nFeatures:\r\n\r\n - Users can create, compile, and run simple programs that use the\r\n   vector extensions of the CPU, all directly from an application.\r\n\r\n - Users can compile Orc programs to assembly source code to be\r\n   compiled and used without linking against the Orc library.\r\n\r\n - The generic assembly language can be extended by an application\r\n   by adding new opcodes.\r\n\r\n - An application can add rules for converting existing or new opcodes\r\n   to binary code for a specific target.\r\n\r\n - Current targets: SSE, MMX, MIPS, Altivec, NEON, and TI C64x+.\r\n   (The c64x target only produces source code.)\r\n\r\n - Programs can optionally be emulated, which is useful for testing, or\r\n   if no rules are available to convert Orc opcodes to executable code.\r\n\r\n\r\nMore information:\r\n\r\n  Web: http://code.entropywave.com/projects/orc/\r\n  Download: http://code.entropywave.com/download/orc/\r\n\r\n\r\nQuestions and Answers:\r\n\r\n - Q: Why not let gcc vectorize my code?\r\n\r\n   A: Two reasons: first, since Orc's assembly language is much more\r\n   restrictive than C, Orc can generate better code than gcc, and\r\n   second, Orc can generate code for functions you define at runtime.\r\n   Many algorithms require gluing together several stages of operations,\r\n   and if each stage has several options, the total amount of code to\r\n   cover all combinations could be inconveniently large.\r\n\r\n - Q: Why not use compiler intrinsics for SIMD code?\r\n\r\n   A: Compiler intrinsics only work for one target, and need to be\r\n   hand written.  Plus, some compilers are very picky about source\r\n   code that uses intrinsics, and will silently produce slow code.\r\n   And, of course, you can't compile intrinsics at runtime.\r\n\r\n - Q: How big is the Orc library?\r\n\r\n   A: For embedded users, the --enable-backend configure option can\r\n   be used to disable irrelvant targets.  Compiled with only one target\r\n   (SSE), the library size is about 150 kB uncompressed, or 48 kB\r\n   compressed.  The goal was to keep the uncompressed size under\r\n   about 100 kB (but that failed!).  A typical build with all targets\r\n   and the full ABI is around 350 kB.\r\n\r\n\r\nCaveats (Known Bugs):\r\n\r\n - ?\r\n\r\n\r\nFuture directions:\r\n\r\n - Addition of more complex loop control and array structures.\r\n\r\n - Addition of an option to compile the Orc library with only the\r\n   runtime features for a single target, e.g., for embedded systems.\r\n \r\n - Addition of rewrite rules, which convert an instruction that cannot\r\n   be converted to binary code into a series of instructions that can.\r\n   This is necessary since assembly instructions on most targets do\r\n   not cover all the features of the Orc assembly language.\r\n \r\n\r\nAbout Entropy Wave:\r\n\r\nEntropy Wave creates tools that allow content producers and distributors\r\nuse open video technology.  Through use of open source software like\r\nGStreamer and Dirac, Entropy Wave's customers save money on licensing\r\ncosts for encoding and streaming video on the web.  Entropy Wave was\r\nfounded in 2008 by long-time open source developer David Schleef.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}